// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  banner    Banner[] @relation("StoreToBanner")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  order Order[] @relation("StoreToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        String   @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToBanner", fields: [storeId], references: [id])
  label     String
  imgUrl    String
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category{
  id String   @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory",fields: [storeId], references: [id])
  products Product[] @relation("CategoryToProduct")
  bannerId String
  banner Banner @relation(fields: [bannerId], references: [id])
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([bannerId])
}

model Size{
  id String  @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize",fields: [storeId], references: [id])
  sizes Product[] @relation("sizeToProduct")
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color{
  id String  @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor",fields: [storeId], references: [id])
  colors Product[] @relation("colorToProduct")
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product{
  id String   @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct",fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId], references: [id])
  sizeId String @default("")
  size Size @relation("sizeToProduct",fields: [sizeId], references: [id])
  colorId String @default("")
  color Color @relation("colorToProduct",fields: [colorId], references: [id])
  orderItems OrderItem[]
  name String
  image Image[]
  price Decimal @db.Decimal(15,2)
  status Boolean @default(false)
  isFeatured Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([colorId])
  @@index([storeId])
  @@index([sizeId])
  
}

model Order{
  id String   @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder",fields: [storeId], references: [id])
  orderItems OrderItem[]
  status String @default("pending")
  name String @default("") 
  phone String @default("") 
  address String @default("") 
  transaction_code String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([storeId])
}

model OrderItem {
  id String   @id @default(uuid())
  orderId String
  order Order  @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Image{
  id String @id @default(uuid())
  productId String
  product Product @relation(fields:[productId],references: [id],onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}